/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutTermsImport } from './routes/_layout/terms'
import { Route as LayoutReportImport } from './routes/_layout/report'
import { Route as LayoutPrivacyRequestImport } from './routes/_layout/privacy-request'
import { Route as LayoutPrivacyImport } from './routes/_layout/privacy'
import { Route as LayoutDemoRequestImport } from './routes/_layout/demo-request'
import { Route as LayoutCookieImport } from './routes/_layout/cookie'
import { Route as LayoutContactSalesImport } from './routes/_layout/contact-sales'
import { Route as LayoutContactImport } from './routes/_layout/contact'
import { Route as LayoutComplianceImport } from './routes/_layout/compliance'
import { Route as LayoutSolutionsContentAggregationImport } from './routes/_layout/solutions/products'
import { Route as LayoutResourcesSupportCenterImport } from './routes/_layout/resources/support-center'
import { Route as LayoutResourcesFaqImport } from './routes/_layout/resources/faq'
import { Route as LayoutResourcesBlogImport } from './routes/_layout/resources/blog'
import { Route as LayoutResourcesBlogsPathImport } from './routes/_layout/resources/blogs/$path'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutTermsRoute = LayoutTermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutReportRoute = LayoutReportImport.update({
  id: '/report',
  path: '/report',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPrivacyRequestRoute = LayoutPrivacyRequestImport.update({
  id: '/privacy-request',
  path: '/privacy-request',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPrivacyRoute = LayoutPrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutDemoRequestRoute = LayoutDemoRequestImport.update({
  id: '/demo-request',
  path: '/demo-request',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCookieRoute = LayoutCookieImport.update({
  id: '/cookie',
  path: '/cookie',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutContactSalesRoute = LayoutContactSalesImport.update({
  id: '/contact-sales',
  path: '/contact-sales',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutContactRoute = LayoutContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutComplianceRoute = LayoutComplianceImport.update({
  id: '/compliance',
  path: '/compliance',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSolutionsContentAggregationRoute =
  LayoutSolutionsContentAggregationImport.update({
    id: '/solutions/content-aggregation',
    path: '/solutions/content-aggregation',
    getParentRoute: () => LayoutRoute,
  } as any)

const LayoutResourcesSupportCenterRoute =
  LayoutResourcesSupportCenterImport.update({
    id: '/resources/support-center',
    path: '/resources/support-center',
    getParentRoute: () => LayoutRoute,
  } as any)

const LayoutResourcesFaqRoute = LayoutResourcesFaqImport.update({
  id: '/resources/faq',
  path: '/resources/faq',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutResourcesBlogRoute = LayoutResourcesBlogImport.update({
  id: '/resources/blog',
  path: '/resources/blog',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutResourcesBlogsPathRoute = LayoutResourcesBlogsPathImport.update({
  id: '/resources/blogs/$path',
  path: '/resources/blogs/$path',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/compliance': {
      id: '/_layout/compliance'
      path: '/compliance'
      fullPath: '/compliance'
      preLoaderRoute: typeof LayoutComplianceImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/contact': {
      id: '/_layout/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof LayoutContactImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/contact-sales': {
      id: '/_layout/contact-sales'
      path: '/contact-sales'
      fullPath: '/contact-sales'
      preLoaderRoute: typeof LayoutContactSalesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/cookie': {
      id: '/_layout/cookie'
      path: '/cookie'
      fullPath: '/cookie'
      preLoaderRoute: typeof LayoutCookieImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/demo-request': {
      id: '/_layout/demo-request'
      path: '/demo-request'
      fullPath: '/demo-request'
      preLoaderRoute: typeof LayoutDemoRequestImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/privacy': {
      id: '/_layout/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof LayoutPrivacyImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/privacy-request': {
      id: '/_layout/privacy-request'
      path: '/privacy-request'
      fullPath: '/privacy-request'
      preLoaderRoute: typeof LayoutPrivacyRequestImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/report': {
      id: '/_layout/report'
      path: '/report'
      fullPath: '/report'
      preLoaderRoute: typeof LayoutReportImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/terms': {
      id: '/_layout/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof LayoutTermsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/resources/blog': {
      id: '/_layout/resources/blog'
      path: '/resources/blog'
      fullPath: '/resources/blog'
      preLoaderRoute: typeof LayoutResourcesBlogImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/resources/faq': {
      id: '/_layout/resources/faq'
      path: '/resources/faq'
      fullPath: '/resources/faq'
      preLoaderRoute: typeof LayoutResourcesFaqImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/resources/support-center': {
      id: '/_layout/resources/support-center'
      path: '/resources/support-center'
      fullPath: '/resources/support-center'
      preLoaderRoute: typeof LayoutResourcesSupportCenterImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/solutions/content-aggregation': {
      id: '/_layout/solutions/content-aggregation'
      path: '/solutions/content-aggregation'
      fullPath: '/solutions/content-aggregation'
      preLoaderRoute: typeof LayoutSolutionsContentAggregationImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/resources/blogs/$path': {
      id: '/_layout/resources/blogs/$path'
      path: '/resources/blogs/$path'
      fullPath: '/resources/blogs/$path'
      preLoaderRoute: typeof LayoutResourcesBlogsPathImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutComplianceRoute: typeof LayoutComplianceRoute
  LayoutContactRoute: typeof LayoutContactRoute
  LayoutContactSalesRoute: typeof LayoutContactSalesRoute
  LayoutCookieRoute: typeof LayoutCookieRoute
  LayoutDemoRequestRoute: typeof LayoutDemoRequestRoute
  LayoutPrivacyRoute: typeof LayoutPrivacyRoute
  LayoutPrivacyRequestRoute: typeof LayoutPrivacyRequestRoute
  LayoutReportRoute: typeof LayoutReportRoute
  LayoutTermsRoute: typeof LayoutTermsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutResourcesBlogRoute: typeof LayoutResourcesBlogRoute
  LayoutResourcesFaqRoute: typeof LayoutResourcesFaqRoute
  LayoutResourcesSupportCenterRoute: typeof LayoutResourcesSupportCenterRoute
  LayoutSolutionsContentAggregationRoute: typeof LayoutSolutionsContentAggregationRoute
  LayoutResourcesBlogsPathRoute: typeof LayoutResourcesBlogsPathRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutComplianceRoute: LayoutComplianceRoute,
  LayoutContactRoute: LayoutContactRoute,
  LayoutContactSalesRoute: LayoutContactSalesRoute,
  LayoutCookieRoute: LayoutCookieRoute,
  LayoutDemoRequestRoute: LayoutDemoRequestRoute,
  LayoutPrivacyRoute: LayoutPrivacyRoute,
  LayoutPrivacyRequestRoute: LayoutPrivacyRequestRoute,
  LayoutReportRoute: LayoutReportRoute,
  LayoutTermsRoute: LayoutTermsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutResourcesBlogRoute: LayoutResourcesBlogRoute,
  LayoutResourcesFaqRoute: LayoutResourcesFaqRoute,
  LayoutResourcesSupportCenterRoute: LayoutResourcesSupportCenterRoute,
  LayoutSolutionsContentAggregationRoute:
    LayoutSolutionsContentAggregationRoute,
  LayoutResourcesBlogsPathRoute: LayoutResourcesBlogsPathRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/compliance': typeof LayoutComplianceRoute
  '/contact': typeof LayoutContactRoute
  '/contact-sales': typeof LayoutContactSalesRoute
  '/cookie': typeof LayoutCookieRoute
  '/demo-request': typeof LayoutDemoRequestRoute
  '/privacy': typeof LayoutPrivacyRoute
  '/privacy-request': typeof LayoutPrivacyRequestRoute
  '/report': typeof LayoutReportRoute
  '/terms': typeof LayoutTermsRoute
  '/': typeof LayoutIndexRoute
  '/resources/blog': typeof LayoutResourcesBlogRoute
  '/resources/faq': typeof LayoutResourcesFaqRoute
  '/resources/support-center': typeof LayoutResourcesSupportCenterRoute
  '/solutions/content-aggregation': typeof LayoutSolutionsContentAggregationRoute
  '/resources/blogs/$path': typeof LayoutResourcesBlogsPathRoute
}

export interface FileRoutesByTo {
  '/compliance': typeof LayoutComplianceRoute
  '/contact': typeof LayoutContactRoute
  '/contact-sales': typeof LayoutContactSalesRoute
  '/cookie': typeof LayoutCookieRoute
  '/demo-request': typeof LayoutDemoRequestRoute
  '/privacy': typeof LayoutPrivacyRoute
  '/privacy-request': typeof LayoutPrivacyRequestRoute
  '/report': typeof LayoutReportRoute
  '/terms': typeof LayoutTermsRoute
  '/': typeof LayoutIndexRoute
  '/resources/blog': typeof LayoutResourcesBlogRoute
  '/resources/faq': typeof LayoutResourcesFaqRoute
  '/resources/support-center': typeof LayoutResourcesSupportCenterRoute
  '/solutions/content-aggregation': typeof LayoutSolutionsContentAggregationRoute
  '/resources/blogs/$path': typeof LayoutResourcesBlogsPathRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/compliance': typeof LayoutComplianceRoute
  '/_layout/contact': typeof LayoutContactRoute
  '/_layout/contact-sales': typeof LayoutContactSalesRoute
  '/_layout/cookie': typeof LayoutCookieRoute
  '/_layout/demo-request': typeof LayoutDemoRequestRoute
  '/_layout/privacy': typeof LayoutPrivacyRoute
  '/_layout/privacy-request': typeof LayoutPrivacyRequestRoute
  '/_layout/report': typeof LayoutReportRoute
  '/_layout/terms': typeof LayoutTermsRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/resources/blog': typeof LayoutResourcesBlogRoute
  '/_layout/resources/faq': typeof LayoutResourcesFaqRoute
  '/_layout/resources/support-center': typeof LayoutResourcesSupportCenterRoute
  '/_layout/solutions/content-aggregation': typeof LayoutSolutionsContentAggregationRoute
  '/_layout/resources/blogs/$path': typeof LayoutResourcesBlogsPathRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/compliance'
    | '/contact'
    | '/contact-sales'
    | '/cookie'
    | '/demo-request'
    | '/privacy'
    | '/privacy-request'
    | '/report'
    | '/terms'
    | '/'
    | '/resources/blog'
    | '/resources/faq'
    | '/resources/support-center'
    | '/solutions/content-aggregation'
    | '/resources/blogs/$path'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/compliance'
    | '/contact'
    | '/contact-sales'
    | '/cookie'
    | '/demo-request'
    | '/privacy'
    | '/privacy-request'
    | '/report'
    | '/terms'
    | '/'
    | '/resources/blog'
    | '/resources/faq'
    | '/resources/support-center'
    | '/solutions/content-aggregation'
    | '/resources/blogs/$path'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/compliance'
    | '/_layout/contact'
    | '/_layout/contact-sales'
    | '/_layout/cookie'
    | '/_layout/demo-request'
    | '/_layout/privacy'
    | '/_layout/privacy-request'
    | '/_layout/report'
    | '/_layout/terms'
    | '/_layout/'
    | '/_layout/resources/blog'
    | '/_layout/resources/faq'
    | '/_layout/resources/support-center'
    | '/_layout/solutions/content-aggregation'
    | '/_layout/resources/blogs/$path'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/compliance",
        "/_layout/contact",
        "/_layout/contact-sales",
        "/_layout/cookie",
        "/_layout/demo-request",
        "/_layout/privacy",
        "/_layout/privacy-request",
        "/_layout/report",
        "/_layout/terms",
        "/_layout/",
        "/_layout/resources/blog",
        "/_layout/resources/faq",
        "/_layout/resources/support-center",
        "/_layout/solutions/content-aggregation",
        "/_layout/resources/blogs/$path"
      ]
    },
    "/_layout/compliance": {
      "filePath": "_layout/compliance.tsx",
      "parent": "/_layout"
    },
    "/_layout/contact": {
      "filePath": "_layout/contact.tsx",
      "parent": "/_layout"
    },
    "/_layout/contact-sales": {
      "filePath": "_layout/contact-sales.tsx",
      "parent": "/_layout"
    },
    "/_layout/cookie": {
      "filePath": "_layout/cookie.tsx",
      "parent": "/_layout"
    },
    "/_layout/demo-request": {
      "filePath": "_layout/demo-request.tsx",
      "parent": "/_layout"
    },
    "/_layout/privacy": {
      "filePath": "_layout/privacy.tsx",
      "parent": "/_layout"
    },
    "/_layout/privacy-request": {
      "filePath": "_layout/privacy-request.tsx",
      "parent": "/_layout"
    },
    "/_layout/report": {
      "filePath": "_layout/report.tsx",
      "parent": "/_layout"
    },
    "/_layout/terms": {
      "filePath": "_layout/terms.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/resources/blog": {
      "filePath": "_layout/resources/blog.tsx",
      "parent": "/_layout"
    },
    "/_layout/resources/faq": {
      "filePath": "_layout/resources/faq.tsx",
      "parent": "/_layout"
    },
    "/_layout/resources/support-center": {
      "filePath": "_layout/resources/support-center.tsx",
      "parent": "/_layout"
    },
    "/_layout/solutions/content-aggregation": {
      "filePath": "_layout/solutions/content-aggregation.tsx",
      "parent": "/_layout"
    },
    "/_layout/resources/blogs/$path": {
      "filePath": "_layout/resources/blogs/$path.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
